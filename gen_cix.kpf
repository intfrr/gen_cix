<?xml version="1.0" encoding="UTF-8"?>
<!-- Komodo Project File - DO NOT EDIT -->
<project id="ea41b411-5cd4-8245-92eb-607d6cc9f30f" kpf_version="4" name="gen_cix.kpf">
<macro async="0" id="77368d02-7eef-104c-b843-fb3f9a8c4d06" idref="b452dab9-5e8a-6b43-b7ab-5e65379d8baf" keyboard_shortcut="" language="JavaScript" name="oncreate" rank="100" trigger="trigger_postopen" trigger_enabled="0">
/**
 * create a Drupal Module from snippets
*/

var koDirs = Components.classes['@activestate.com/koDirs;1'].
    getService(Components.interfaces.koIDirs);
var os = Components.classes['@activestate.com/koOs;1'].
    getService(Components.interfaces.koIOs);
var view = ko.views.manager.currentView;
var scimoz = view.scimoz;
var project = ko.projects.manager.currentProject;
var project_name = os.path.withoutExtension(project.name);

var module_name = ko.dialogs.prompt('Pick a name for your new module', 'Module', project_name);

var ANCHOR_MARKER = '!@#_anchor';
var CURRENTPOS_MARKER = '!@#_currentPos';

var project_root = project.liveDirectory;

function newFile(path, text, fileType /*=PHP*/) {
  if (typeof(fileType) == 'undefined') {
    fileType = 'PHP';
  }
  
  if (!os.path.exists(path)) {
    ko.views.manager.doNewViewAsync(fileType, 'editor', function(view) {
      view.document.buffer = text;
      view.document.new_line_endings = view.document.EOL_LF;
      view.document.existing_line_endings = view.document.EOL_LF;
      view.saveAsURI(path);
    });
  } else {
    ko.dialogs.alert('The file '+os.path.basename(path)
                     + ' already exists at the location '
                     + os.path.dirname(path));
  }
}

function getTabstopKeys(text) {
  var keyArr = findAll(/\[\[\%tabstop\:([\w\ ]+?)\]\]/g, text);
  var keys = [];
  for (i in keyArr) {
    keys.push(keyArr[i][1]);
  }
  return keys;
}

function deMarkerIfy(Str) {
  var newStr = Str.replace(CURRENTPOS_MARKER, '');
  newStr = newStr.replace(ANCHOR_MARKER, '');
  return newStr;
}

function findAll(rx, text) {
  var match = false;
  rx = new RegExp(rx);
  var out = new Array();
  while((match = rx.exec(text)) !== null) {
    out.push(match);
  }
  return out;
}

function tabstopReplacer(arg, text) {
  var keys = getTabstopKeys(text);
  var args = [];
  for(i=0;i&lt;keys.length;i++) {
    // is the first char of the string in caps?
    if(/^[A-Z]/.test(keys[i])) {
      args.push(capitalize(arg));
    } else {
      args.push(arg.toLowerCase());
    }
  }
  var rx = new RegExp(/\[\[\%tabstop\:[\S\ ]+?\]\]/g);
  var newStr = text;
  if(!rx.test(text)) { // detect the tabstops
    return false;
  } else {
    for (i=0;i&lt;keys.length;i++) {
      // create the specific string we're replacing
      var target = "\[\[\%tabstop\:"+keys[i]+"\]\]";
      newStr = newStr.replace(target, args[i]);
    }
  }
  var viewData = ko.interpolate.getViewData(window);
  var istrings = ko.interpolate.interpolate(
                        window,
                        [], // codes are not bracketed
                        [newStr], // codes are bracketed
                        arg,
                        viewData);
  newStr = deMarkerIfy(istrings[0]); // take out cursor pos markers
  return newStr;
}

function makeFileFromSnippet(snpt_name, module_name, project_root, extension, type) {
  var snpt = ko.projects.findPart('snippet', snpt_name, 'container');
  var txt = tabstopReplacer(module_name, snpt.value);
  var path = os.path.join(project_root, module_name + extension);
  newFile(path, txt, type);
}

// create module file
makeFileFromSnippet('Install', module_name, project_root, '.install', 'Text');
makeFileFromSnippet('Info', module_name, project_root, '.info', 'Text');
makeFileFromSnippet('Module', module_name, project_root, '.module', 'PHP');</macro>
<snippet id="b0afdeef-3cac-3f43-9a46-4892a24f670a" idref="b452dab9-5e8a-6b43-b7ab-5e65379d8baf" indent_relative="false" keyboard_shortcut="" name="Module" set_selection="false">
&lt;?php
// $Id$

/**
 * Implementation of hook_perm().
 */

function [[%tabstop:name]]_perm() {
    return array(
        'some permission',
    );
}

/**
 * Implementation of hook_menu().
 */

function [[%tabstop:name]]_menu() {
    $items['admin/settings/[[%tabstop:name]]'] = array(
        'title' =&gt; '[[%tabstop:name]]',
        'page callback' =&gt; 'drupal_get_form',
        'page arguments' =&gt; array(
            '[[%tabstop:name]]_admin_form'
        ) ,
        'access arguments' =&gt; array(
            'administer site configuration'
        ) ,
    );
    return $items;
}

/**
 * Menu callback - Admin settings form.
 */

function [[%tabstop:name]]_admin_form() {
    $form = array();
    return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter().
 */

function [[%tabstop:name]]_form_alter(&amp;$form, $form_state, $form_id) {
    switch ($form_id) {
        // Alter node edit form
        case $form['type']['#value'] . '_node_form':
            break;
    }
}

/**
 * Implementation of hook_nodeapi().
 */

function [[%tabstop:name]]_nodeapi(&amp;$node, $op, $a3 = NULL, $a4 = NULL) {
    switch ($op) {
        case 'presave':
        break;
        case 'insert':
        break;
        case 'update':
        break;
        case 'view':
        break;
    }
}
!@#_currentPos!@#_anchor</snippet>
<snippet id="be8ceedf-73fe-e048-83d4-27f1e6dd04cf" idref="b452dab9-5e8a-6b43-b7ab-5e65379d8baf" indent_relative="false" keyboard_shortcut="" name="Install" set_selection="false">
&lt;?php
// $Id$

/*
 * @file: To do, some docs about your install file
 */

/**
 * Implementation of hook_install().
 */

function [[%tabstop:name]]_install() {
  // un-comment this once you've implemented the schema
  //db_install_schema('[[%tabstop:name]]');
}

/**
 * Implementation of hook_uninstall().
 */

function [[%tabstop:name]]_uninstall() {
  // un-comment this once you've implemented the schema
  //drupal_uninstall_schema('[[%tabstop:name]]');
}
!@#_currentPos!@#_anchor</snippet>
<snippet id="c4d68043-207f-9645-b4d7-eb7982d83490" idref="b452dab9-5e8a-6b43-b7ab-5e65379d8baf" indent_relative="false" keyboard_shortcut="" name="Info" set_selection="false">
; $Id$
name = "[[%tabstop:name]]"
description = ""
;dependencies[] = 
core = 6.x
!@#_currentPos!@#_anchor</snippet>
<folder id="b452dab9-5e8a-6b43-b7ab-5e65379d8baf" idref="ea41b411-5cd4-8245-92eb-607d6cc9f30f" name="Commands">
</folder>
<preference-set idref="ea41b411-5cd4-8245-92eb-607d6cc9f30f">
  <string id="import_exclude_matches">*.*~;*.bak;*.tmp;CVS;.#*;*.pyo;*.pyc;.svn;*%*;tmp*.html;.DS_Store;*.kpf</string>
  <string id="import_include_matches"></string>
  <boolean id="import_live">1</boolean>
  <boolean id="import_recursive">1</boolean>
  <string id="import_type">useFolders</string>
  <string id="phpExtraPaths">/Users/jeffg/Sites/drupal</string>
</preference-set>
</project>
