<?php

// $Id$

// requires

require_once (drupal_get_path('module', 'gen_cix') . '/cix_helper.inc.php');

/**
 * Implementation of hook_perm().
 */

function gen_cix_perm() {
  return array(
    'generate cix',
  );
}
/**
 * Implementation of hook_menu().
 */

function gen_cix_menu() {
  $items['admin/settings/gen_cix'] = array(
    'title' => 'Generate Cix data for Komodo',
    'page callback' => 'drupal_get_form',
    'description' => 'Generate Cix XML data for Komodo autocomplete of Drupal data types.',
    'page arguments' => array(
      'gen_cix_admin_form'
    ) ,
    'access arguments' => array(
      'administer site configuration'
    ) ,
  );
  $items['gencix/generate'] = array(
    'title' => 'Generate CIX',
    'page callback' => 'gen_cix_generate',
    'access arguments' => array(
      'generate cix',
    ) ,
  );
  $items['gencix/api'] = array(
    'title' => 'Generate CIX',
    'page callback' => 'gen_cix_api',
    'page arguments' => array(arg(1), arg(2)),
    'access arguments' => array(
      'access content',
    ) ,
  );
  return $items;
}
/**
 * Menu callback - Admin settings form.
 */

function gen_cix_admin_form() {
  $form = array();
  return system_settings_form($form);
}

function gen_cix_generated_cix_form($form_state) {
  $form = array();
  $form['generated_cix'] = array(
    '#type' => 'textarea',
    '#title' => 'Generated CIX Data',
    '#default_value' => $cix,
  );
}

/*
* function gen_cix_generate
*
*/

function gen_cix_generate() {
  $xml_str = _gen_cix_generate();
  $content = '<textarea cols="80" rows="25">' . $xml_str . '</textarea>';
  print theme('page', $content);
}

function _gen_cix_generate() {

  // gets us type info, but they are not real type objects
  $types = node_get_types('types');
  $data = array(
    'functions' => array() , // all global functions
    'classes' => array() , // all internally defined classes
    'variables' => array() , // all global variables
    'constants' => array() , // all global constants
    'meta' => array() , // meta data about the data, eg version, tag
  );

  // maybe go looking for and load a node of this type, hard require at least one node?
  $data['meta'] = array(
    'file' => 'DrupalDataTypes.cix',
    'version' => '2.0',
    'description' => 'Generated cix for Drupal data types',
  );
  foreach($types as $type) {
    $name = _gen_cix_type_name($type->type);
    $data['variables'][] = array(
      'name' => $type->type,
      'citdl' => $name
    );

    // as a convention, make the 'page' type the default 'node' type
    
    if ($type->type == 'page') {
      $data['variables'][] = array(
        'name' => 'node',
        'citdl' => $name
      );
    }
    $vars = _gen_cix_get_type_data($type);
    $data['classes'][] = array(
      'attr' => array(
        'name' => $name,
        'ilk' => 'class'
      ) ,
      'variables' => $vars,
    );
  }

  // handle the user
  $user_class_name = 'DrupalUser';
  global $user;
  $user_class = array(
    'attr' => array(
      'name' => $user_class_name,
      'ilk' => 'class',
    ) ,
    'variables' => array() ,
  );
  $user_vars = array_keys((array)$user);
  foreach($user_vars as $var) {
    $user_class['variables'][] = array(
      'name' => $var
    );
  }
  $data['classes'][] = $user_class;
  $data['variables'][] = array(
    'name' => 'account',
    'citdl' => $user_class_name
  );
  $data['variables'][] = array(
    'name' => 'user',
    'citdl' => $user_class_name
  );

  // generate the XML
  $cix_helper = _gen_cix_get_cix_helper();
  $cix_helper->data = $data;
  $xml_str = $cix_helper->gen_cix();
  return $xml_str;
}

function _gen_cix_type_name($type) {
  return 'Drupal' . ucwords(str_replace('_', '', $type)) . 'Type';
}

function _gen_cix_get_type_data($type) {
  $out = array();
  $sql = "SELECT nid FROM {node} WHERE type = '%s' LIMIT 1";
  $nid = db_result(db_query($sql, $type->type));
  
  if ($nid) {
    $node = node_load($nid);
    $props = array_keys((array)$node);
    foreach($props as $var) {
      $out[] = array(
        'name' => $var
      );
    }
    
    if (!empty($out)) {
      return $out;
    } else {
      return FALSE;
    }
  }
  return FALSE;
}

function _gen_cix_get_cix_helper() {
  static $cix_helper;
  
  if (!is_a($cix_helper, 'PHPCixGenerator')) {
    $xml_helper = new PHPCixGenerator(); // format output

    
  }
  return $xml_helper;
}

function pp($data) {
  
  if (func_num_args() > 1) {
    $data = func_get_args();
  }
  return "<pre>" . print_r($data, 1) . "</pre>";
}

function gen_cix_api() {
  $args = func_get_args();
  $count = func_num_args();
  
  if ($count < 2) {

    // remember, _jsonapi calls exit;
    _gen_cix_jsonp_api(array(
      'error' => 'No valid argument supplied. Suggestion: as/api/catalog',
    ));
  } else {
    $op = $args[2];
    
    if ($count > 3) {
      $callback_args = array();
      $tmp = array_slice($args, 3);
      foreach($tmp as $item) {
        $callback_args[] = check_plain($item);
      }
    }
  }
  $function = FALSE;
  
  if (isset($_GET['callback'])) {
    $function = check_plain($_GET['callback']);
  }
  $xml_str = _gen_cix_generate();
  $xml_str_esc = htmlentities($xml_str, ENT_QUOTES);
  $data = array(
    'generated_cix' => $xml_str_esc
  );
  _gen_cix_jsonp_api($data, $function);
}

function _gen_cix_jsonp_api($data, $function = FALSE) {
  
  if (!empty($data) || $data !== FALSE) {
    $content_type = 'application/json';
    $data = _gen_cix_massage_types($data);
    $str_json = json_encode($data);
    
    if ($function) {
      $content_type = 'text/javascript';
      $str_json = $function . '(' . $str_json . ') ';
    }
    header('Content-type: ' . $content_type);
    echo $str_json;
    exit;
  } else {
    header("HTTP/1.1 404 Not Found");
    exit;
  }
}

function _gen_cix_massage_types($data) {
  $data = (array)$data;
  $out = array();
  foreach($data as $key => $item) {
    
    if (is_a($item, 'stdClass')) {
      $item = (array)$item;
    }
    
    if (is_array($item)) {
      $item = _gen_cix_massage_types($item);
    }
    
    if (is_numeric($item) && substr($key, -3) === '_id') {
      $item = _gen_cix_cast_numeric($item);
    }
    $out[$key] = $item;
  }
  return $out;
}

function _gen_cix_cast_numeric($i) {
  
  if ((int)$i == $i) {
    return (int)$i;
  } else 
  if ((float)$i == $i) {
    return (float)$i;
  } else 
  if ((bool)$i == $i) {
    return (bool)$i;
  } else {
    return $i;
  }
}
